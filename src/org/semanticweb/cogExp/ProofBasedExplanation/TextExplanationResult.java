package org.semanticweb.cogExp.ProofBasedExplanation;

import java.awt.BorderLayout;
import java.awt.Color;
import java.awt.Dimension;
import java.awt.FlowLayout;
import java.awt.GridBagConstraints;
import java.awt.GridBagLayout;
import java.util.List;

import javax.swing.BorderFactory;
import javax.swing.JComponent;
import javax.swing.JLabel;
import javax.swing.JPanel;
import javax.swing.JScrollPane;
import javax.swing.ScrollPaneConstants;

import org.protege.editor.core.ProtegeManager;
import org.protege.editor.owl.OWLEditorKit;
import org.protege.editor.owl.ui.explanation.ExplanationResult;
import org.semanticweb.cogExp.OWLAPIVerbaliser.TextElementSequence;

/**
 * Contains the result (with proper layout) of the verbalized Axioms. 
 * @author fpaffrath
 *
 */
public class TextExplanationResult extends ExplanationResult{ // implements OWLModelManagerListener{

	private OWLEditorKit editorKit;
	private static final long serialVersionUID = 1944836708820525384L;

	private JPanel content = new JPanel();
	private GridBagLayout contentLayout  = new GridBagLayout();
	private GridBagConstraints constraint = new GridBagConstraints();
	private Dimension contentSize;
	
	
	public TextExplanationResult(JPanel panel,OWLEditorKit ek){
		this.editorKit = ek;
		// set constraints for GridBagLayout
		constraint.fill = GridBagConstraints.BOTH;
		constraint.anchor = GridBagConstraints.PAGE_START;
		constraint.gridx = 0;
		constraint.gridy = 0;	
		constraint.weightx = 0;
		constraint.weighty = 0;
		
		
		
		content.setLayout(contentLayout);
		// try to set the width and height of the content panel depending on the size of
		// the parent if the parent exists.
		// else, set it depending on the Workspace size
		try{
			
			contentSize = getPreferredSize();
			if(contentSize.getHeight()<=0||contentSize.getWidth()<=0){
				contentSize = new Dimension(100, 100);
			}
			//TODO maybe set the border somewhere else or restructure this class
			//setBorder(BorderFactory.createLineBorder(Color.black));
			
			
		}catch(Exception e){
			
			contentSize = new Dimension(ProtegeManager
					.getInstance()
					.getFrame(editorKit.getWorkspace())
					.getSize());
			contentSize.setSize(contentSize.getWidth()*0.8, contentSize.getHeight()*0.7);
//			contentSize = new Dimension((int)getToolkit().getScreenSize().getWidth()/4, 0);
//			setBorder(BorderFactory.createLineBorder(Color.red));
		}
		content.setSize(contentSize);
		
		
		// must be set s.t. the scroll pane works properly
		this.setLayout(new BorderLayout(0,0));
		
	}
	
	
	/**
	 * returns a proper sized JPanel (depending on the size of the screen
	 * and on the length of the sequence)
	 * @param sequence generated by the verbalizer
	 * @return TextExplanationResult with proper size
	 */
	public TextExplanationResult getResult(TextElementSequence sequence){
		CustomJPanel innerpanel = new CustomJPanel();
		FlowLayout flowLayout = new FlowLayout(FlowLayout.LEFT);
		
		
		innerpanel.setLayout(flowLayout);
		innerpanel.setBackground(Color.WHITE);
		
		content.add(innerpanel,constraint);
				
		List<JLabel> labels = sequence.generateLabels();
		
//		System.out.println(sequence.toString());
//		System.out.print(" ");

		// packing Labels in Panels 
		for(JLabel label : labels){
//			System.out.print(""+label.getText()+" ");
			// concatenate labels and put them into a panel if line is broken
			innerpanel.add(label);
				if(label.getText().equals("\n")){								
					Dimension d = innerpanel.computeBestSize(content);
					
//					System.out.println("Panel size: "+d.getWidth()+", "+d.getHeight());
					
					refreshContentsize(d);
					
					constraint.gridy++;
				
					innerpanel.setPreferredSize(d);
					content.add(innerpanel, constraint);
					
					innerpanel = new CustomJPanel(flowLayout); // removeAll
					innerpanel.setBackground(Color.WHITE);
				}
			
			
		}
		
		content.setPreferredSize(contentSize);
		
		this.add(getScrollPane(content));
		
		return this;
	}
	
	
	/**
	 * 
	 * @param panel
	 * @return ScrollPane for panel
	 */
	private JScrollPane getScrollPane(JPanel panel){		
			JScrollPane scrollPane = new JScrollPane (panel, 
		            ScrollPaneConstants.VERTICAL_SCROLLBAR_AS_NEEDED,
		            ScrollPaneConstants.HORIZONTAL_SCROLLBAR_AS_NEEDED);
	
			return scrollPane;
	}
	
	/**
	 * @param size
	 */
	private void refreshContentsize(Dimension size){
//		if(contentSize.height+size.height<ProtegeManager.getInstance()
//														.getFrame(editorKit.getWorkspace())
//														.getSize().getHeight()
//				){
//			contentSize.height += size.height;
//		}
		setPreferredSize(size);
			
	}
	
	@Override
    public Dimension getPreferredSize() {
	
//        Dimension workspaceSize = editorKit.getWorkspace().getSize();
//        int width = (int) (workspaceSize.getWidth() * 0.8);
//        int height = (int) (workspaceSize.getHeight() * 0.7);
//        return new Dimension(width, height);
		return contentSize;
}
	
	@Override
	public void dispose() {
		// TODO Auto-generated method stub	
	}


}
