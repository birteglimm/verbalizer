package org.semanticweb.cogExp.ProofBasedExplanation;

import java.awt.BorderLayout;
import java.awt.Color;
import java.awt.Component;
import java.awt.Dimension;
import java.awt.FlowLayout;
import java.awt.Graphics;
import java.awt.GridBagConstraints;
import java.awt.GridBagLayout;
import java.awt.Insets;
import java.util.List;
import java.util.function.Predicate;

import javax.swing.BorderFactory;
import javax.swing.JLabel;
import javax.swing.JPanel;
import javax.swing.JScrollPane;
import javax.swing.ScrollPaneConstants;
import javax.swing.border.Border;
import javax.swing.border.EmptyBorder;

import org.protege.editor.owl.ui.explanation.ExplanationResult;
import org.semanticweb.cogExp.OWLAPIVerbaliser.TextElementSequence;

/**
 * Contains the result (with proper layout) of the verbalized Axioms. 
 * @author fpaffrath
 *
 */
public class TextExplanationResult extends ExplanationResult{ // implements OWLModelManagerListener{

	
	private static final long serialVersionUID = 1944836708820525384L;

	private JPanel content = new JPanel();
	private GridBagLayout contentLayout  = new GridBagLayout();
	private GridBagConstraints constraint = new GridBagConstraints();
	private Dimension contentSize;
	
	
	public TextExplanationResult(JPanel panel){
		// set constraints for GridBagLayout
		constraint.fill = GridBagConstraints.HORIZONTAL;
		constraint.anchor = GridBagConstraints.FIRST_LINE_START;
		constraint.gridx = 0;
		constraint.gridy = 0;	
		constraint.weightx = 0;
		constraint.weighty = 0;
		
		content.setLayout(contentLayout);
		// set the width and height of the content panel depending on the screen size
		contentSize = new Dimension((int)getToolkit().getScreenSize().getWidth()/4,
											  (int)getToolkit().getScreenSize().getHeight()/2);
		content.setSize(contentSize);
		// must be set s.t. the scrollpane works properly
		this.setLayout(new BorderLayout());
	}
	
	
	/**
	 * returns a proper sized JPanel (depending on the size of the screen
	 * and on the length of the sequence)
	 * @param sequence generated by the verbalizer
	 * @return TextExplanationResult with proper size
	 */
	public TextExplanationResult getResult(TextElementSequence sequence){
		CustomJPanel innerpanel = new CustomJPanel();
		FlowLayout flowLayout = new FlowLayout(FlowLayout.LEFT);
		
		
		innerpanel.setLayout(flowLayout);
		innerpanel.setBackground(Color.WHITE);
		
		content.add(innerpanel,constraint);
		
		innerpanel.add(new JLabel(""));
		
		List<JLabel> labels = sequence.generateLabels();
		System.out.println(sequence.toString());
//		System.out.println("toList: ");
//	
//		for(JLabel label: labels){
//			System.out.println(label.getText());
//		}
		
		/*
		 * TODO maybe revision of the labels/sequence could be reduced by 
		 * proper generation
		 */
		
		// revision of the labels/sequences
		for (int i=0; i<labels.size(); i++){
			// check if colons are set correctly and fix it if necessary
			if(i<labels.size()-1 && 
					labels.get(i).getText().equals(".")){
				
				if(labels.get(i+1).getText().equals(" ")){
					labels.set(i+1, new JLabel(""));
				}
				
				if(i>0 && labels.get(i-1).getText().equals(" ")){
					labels.set(i-1, new JLabel(""));
				}
			}
			// check if there are double spaces and correct if necessary
			if(labels.get(i).getText().equals(" ") ||
			   labels.get(i).getText().equals("")  ||
			   labels.get(i).getText().equals(", ") ){
				
				if(i<=0 && labels.get(i-1).getText().equals(" ")){				
					labels.set(i-1, new JLabel(""));
				}
				if(!(i>=labels.size()-1) && labels.get(i+1).getText().equals(" ")){
					labels.set(i+1, new JLabel(""));
				}
			}
			
			//clean the list
			labels.removeIf(l -> l.getText().equals(""));		
		}
		
		// packing Labels in Panels of proper size
		for(JLabel label : labels){
			System.out.println("Label : |"+label.getText()+"|");
			// concatenate labels and put them into a panel if line is broken
				innerpanel.add(label);
				if(label.getText().equals("\n")){								
					Dimension d = innerpanel.computeBestSize(content);
					constraint.gridy++;
				
					innerpanel.setPreferredSize(d);
					content.add(innerpanel, constraint);
					
					innerpanel = new CustomJPanel(flowLayout); // removeAll
					innerpanel.setBackground(Color.WHITE);
				}
			
			
		}
		
		content.setPreferredSize(contentSize);
		this.add(getScrollPane(content));
		
		return this;
	}
	
	
	/**
	 * 
	 * @param panel
	 * @return ScrollPane for panel
	 */
	private JScrollPane getScrollPane(JPanel panel){		
			JScrollPane scrollPane = new JScrollPane (panel, 
		            ScrollPaneConstants.VERTICAL_SCROLLBAR_AS_NEEDED,
		            ScrollPaneConstants.HORIZONTAL_SCROLLBAR_AS_NEEDED);
			return scrollPane;
	}
	
	@Override
	public void dispose() {
		// TODO Auto-generated method stub	
	}


}
