 package org.semanticweb.cogExp.ProofBasedExplanation;

import java.awt.BorderLayout;
import javax.swing.BoxLayout;
import java.awt.Dimension;
import java.awt.FlowLayout;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.util.List;

import javax.swing.JButton;
import javax.swing.JLabel;
import javax.swing.JEditorPane;
import javax.swing.JPanel;
import javax.swing.JScrollPane;
import javax.swing.ScrollPaneConstants;
import javax.swing.text.Document;
import javax.swing.text.html.HTMLEditorKit;
import javax.swing.text.html.StyleSheet;

import org.protege.editor.owl.OWLEditorKit;
import org.protege.editor.owl.ui.explanation.ExplanationResult;
import org.semanticweb.cogExp.OWLAPIVerbaliser.ContentJPanel;
import org.semanticweb.cogExp.OWLAPIVerbaliser.TextElementSequence;

/**
 * Contains the result (with proper layout) of the verbalized Axioms. 
 * @author fpaffrath
 *
 */
public class TextExplanationResult extends ExplanationResult{ // implements OWLModelManagerListener{

	private static final long serialVersionUID = 1944836708820525384L;

	private ContentJPanel content;
	private JPanel result = new JPanel();

	

	
	private int currentLayout = 0;
	
	public TextExplanationResult(JPanel panel,OWLEditorKit ek){
		this.result = panel;
		
//		content.setLayout(contentLayout);
		// try to set the width and height of the content panel depending on the size of
		// the parent if the parent exists.
		// else, set it depending on the Workspace size
//		try{
//			
//			contentSize = getPreferredSize();
//			if(contentSize.getHeight()<=0||contentSize.getWidth()<=0){
//				contentSize = new Dimension(100, 100);
//			}
//	
//		}catch(Exception e){
//			
//			contentSize = new Dimension(ProtegeManager
//					.getInstance()
//					.getFrame(editorKit.getWorkspace())
//					.getSize());
//			contentSize.setSize(contentSize.getWidth()*0.8, contentSize.getHeight());
//	
//			
//		}
//		content.setSize(contentSize);
	    
		
		// must be set s.t. the scroll pane works properly
		this.setLayout(new BorderLayout(0,0));
	}
	
	
	/**
	 * returns a proper sized JPanel (depending on the size of the screen
	 * and on the length of the sequence)
	 * @param sequence generated by the verbalizer
	 * @param ek OWLEditorKit
	 * @return TextExplanationResult with proper size
	 */
	public TextExplanationResult getResult(TextElementSequence sequence, OWLEditorKit ek){
//		FlowLayout flowLayout = new FlowLayout(FlowLayout.LEFT);
		
		
		content = new ContentJPanel(ek, sequence);
		result.add(content);
		this.add(getScrollPane(result));
//		contentSize.setSize(contentSize.getWidth(), height/*+fac*getFontMetrics(getFont()).getHeight()*/);

		return this;
	}
	
	
	/*
	public TextExplanationResult getResultSC(List<String> htmls, OWLEditorKit ek){
//		FlowLayout flowLayout = new FlowLayout(FlowLayout.LEFT);
		
		JEditorPane editorPane = new JEditorPane("text/html","");
		editorPane.setEditable(false);
		JPanel resultB = new JPanel();                                                   //
		JPanel resultK = new JPanel();													//								
		
		// we need an HTMLEditorKit for using CSS
		HTMLEditorKit kit = new HTMLEditorKit();
		editorPane.setEditorKit(kit);
		// StyleSheet styleSheet = kit.getStyleSheet(); <--- one could add the CSS rules to such a style sheet. However, setText seems to do the job.
		Document doc = kit.createDefaultDocument();
		editorPane.setDocument(doc);
		if (htmls.size()>0)
			editorPane.setText(htmls.get(0));
		Dimension panesize = editorPane.getPreferredSize() ;
		
		content = new ContentJPanel(ek,panesize.getWidth() + 100,panesize.getHeight() + 60);
		

		resultK.add(new JLabel("Styles:  "));

		JButton[] styleButton = new JButton[12];
		for(int i=0; i<12; i++) {
			styleButton[i] = new JButton(""+(i+1));
			styleButton[i].addActionListener(new MyActionListener(i, editorPane, htmls));
			resultK.add(styleButton[i],BorderLayout.PAGE_START);
	//		styleButton[i].setLayout (new FlowLayout (FlowLayout.LEADING));		// necessary?
			
		}
		resultK.add(new JLabel("                                        "));
		
		resultK.setLayout(new BoxLayout(resultK, BoxLayout.X_AXIS));
		resultK.setAlignmentX(LEFT_ALIGNMENT);
		resultB.add(resultK);
		resultB.setAlignmentX(LEFT_ALIGNMENT);
				
		resultB.setLayout(new BoxLayout(resultB, BoxLayout.Y_AXIS));

		resultB.add(editorPane, BorderLayout.PAGE_END);				// Kölle, experimental, see line 111
		this.add(getScrollPane(result)); // ORGINAL
//		styleButton.getRootPane().setLayout (new FlowLayout (FlowLayout.LEFT));	
		
		result.add(resultB);	// Kölle, experimental 222 see line 111
		
//		contentSize.setSize(contentSize.getWidth(), height);

		return this;
	}
*/
	
	/**
	 * 
	 * @param panel
	 * @return ScrollPane for panel
	 */
	private JScrollPane getScrollPane(JPanel panel){		
			JScrollPane scrollPane = new JScrollPane (panel, 
		            ScrollPaneConstants.VERTICAL_SCROLLBAR_AS_NEEDED,
		            ScrollPaneConstants.HORIZONTAL_SCROLLBAR_AS_NEEDED);
	
			return scrollPane;
	}
	
	/* (non-Javadoc)
	 * @see javax.swing.JComponent#getPreferredSize()
	 */
	@Override
    public Dimension getPreferredSize() {
		Dimension d = new Dimension();
		d.setSize(content.getSize().getWidth()+getFontMetrics(getFont()).getMaxAdvance(),
				content.getSize().getHeight()+getFontMetrics(getFont()).getHeight());
		
		return d;
}
	
	@Override
	public void dispose() {
		// TODO Auto-generated method stub	
	}

	

}
